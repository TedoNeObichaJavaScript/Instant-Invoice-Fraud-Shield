services:
  # Database
  postgres:
    image: postgres:15
    container_name: microservices-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-microservices_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_THIS_SECURE_PASSWORD}
      # Performance optimizations
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    # Remove port exposure for security - only internal access
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    # Remove port exposure for security - only internal access
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: production
    container_name: microservices-api-gateway
    ports:
      - "8080:8080"  # Temporarily expose for debugging
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-microservices_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_SECURE_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ACCOUNTS_SERVICE_URL=http://accounts-service:8081
      - JWT_SECRET=${JWT_SECRET:-YWJjZGVmZ2hpams7bG1ub3BxcnN0dXZ3eHl6MTIzNDU2Nzg5MGFiY2RlZmdoaWprO2xtbm9wcXJzdHV2eHl6MTIzNDU2Nzg5MA==}
      - API_KEY=${API_KEY:-CHANGE_THIS_TO_A_SECURE_API_KEY}
      - JAVA_OPTS=-Xms512m -Xmx2g -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Accounts Microservice
  accounts-service:
    build:
      context: ./accounts-service
      dockerfile: Dockerfile
      target: production
    container_name: microservices-accounts
    # Remove port exposure - only accessible via API Gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-microservices_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-CHANGE_THIS_SECURE_PASSWORD}
      - API_KEY=${API_KEY:-CHANGE_THIS_TO_A_SECURE_API_KEY}
      - JAVA_OPTS=-Xms256m -Xmx1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Frontend + Nginx Reverse Proxy
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: microservices-frontend
    ports:
      - "443:443"  # HTTPS only
      - "80:80"    # HTTP redirect to HTTPS
    depends_on:
      - api-gateway
    networks:
      - microservices-network


volumes:
  postgres_data:

networks:
  microservices-network:
    driver: bridge

